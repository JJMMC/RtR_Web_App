from fastapi import APIRouter, HTTPException, Query

from typing import List
from datetime import date
from decimal import Decimal
from database.crud_operations import articulo_crud
from database.db_session import db_manager
from database.db_models import Articulo
from sqlalchemy import select



router = APIRouter(
    prefix="/analytics",      # prefijo com√∫n para estas rutas
    tags=["Analytics"]        # agrupaci√≥n en la documentaci√≥n
)


#### ANALITYCS STATS

@router.get("/price-stats", response_model=List[str])
def get_price_stats():
    pass

'''
Posibles analytics:

art√≠culo con precio m√°s barato y m√°s caro por categor√≠a
art√≠culo con mayor descenso de precio registrado
art√≠culo con mayor descenso de precio registrado por categor√≠a
promedio de precio por categor√≠a

üìä ESTAD√çSTICAS RECOMENDADAS:
üìà An√°lisis de Precios:
Estad√≠sticas generales (precio promedio, m√°ximo, m√≠nimo global)
Top productos m√°s caros/baratos (por categor√≠a y general)
Evoluci√≥n de precios (promedio por mes/semana)
Distribuci√≥n de precios por rangos
üîÑ An√°lisis de Variaciones:
Productos con mayor volatilidad de precios
Mayores descensos de precio (ofertas/descuentos)
Mayores subidas de precio (productos en alza)
Productos sin cambios de precio (estables)
üìä An√°lisis por Categor√≠as:
Comparativa entre categor√≠as (promedio, rango)
Categor√≠a m√°s cara/barata
Categor√≠a con m√°s variabilidad
‚è∞ An√°lisis Temporal:
Tendencias por per√≠odo (√∫ltimos 30/90 d√≠as)
Productos con cambios recientes
Frecuencia de cambios por producto
üí° CONSEJOS T√âCNICOS:
Usa agregaciones SQL (AVG, MAX, MIN, COUNT)
Considera paginaci√≥n para endpoints grandes
Schemas espec√≠ficos para cada tipo de estad√≠stica
Cacheable (estad√≠sticas cambian poco)


'''